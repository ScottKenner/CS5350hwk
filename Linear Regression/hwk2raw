\documentclass[12pt, fullpage,letterpaper]{article}

\usepackage[margin=1in]{geometry}
\usepackage{url}
\usepackage{amsmath}
\usepackage{amssymb}
\usepackage{xspace}
\usepackage{graphicx}
\usepackage{hyperref}
\usepackage{listings}

\newcommand{\semester}{Fall 2022}
\newcommand{\assignmentId}{2}
\newcommand{\releaseDate}{29 Sep, 2022}
\newcommand{\dueDate}{11:59pm, 21 Oct, 2022}

\newcommand{\bx}{{\bf x}}
\newcommand{\bw}{{\bf w}}

\title{CS 5350/6350: Machine Learining \semester}
\author{Homework \assignmentId}
\date{Handed out: \releaseDate\\
	Due: \dueDate}


\title{CS 5350/6350: Machine Learning \semester}
\author{Homework \assignmentId}
\date{Handed out: \releaseDate\\
  Due date: \dueDate}

\begin{document}
\maketitle

\input{emacscomm}
{\footnotesize
	\begin{itemize}
		\item You are welcome to talk to other members of the class about
		the homework. I am more concerned that you understand the
		underlying concepts. However, you should write down your own
		solution. Please keep the class collaboration policy in mind.

		\item Feel free to discuss the homework with the instructor or the TAs.

		\item Your written solutions should be brief and clear. You do not need to include original problem descriptions in your solutions. You need to
		show your work, not just the final answer, but you do \emph{not}
		need to write it in gory detail. Your assignment should be {\bf no
			more than 20 pages}. Every extra page will cost a point.

		\item Handwritten solutions will not be accepted.


		\item {\em Your code should run on the CADE machines}. You should
		include a shell script, {\tt run.sh}, that will execute your code
		in the CADE environment. Your code should produce similar output
		to what you include in your report.

		You are responsible for ensuring that the grader can execute the
		code using only the included script. If you are using an
		esoteric programming language, you should make sure that its
		runtime is available on CADE.

		\item Please do not hand in binary files! We will {\em not} grade
		binary submissions.

		\item The homework is due by \textbf{midnight of the due date}. Please submit
		the homework on Canvas.

	\end{itemize}
}


\section{Paper Problems [40 points + 8 bonus]}
\begin{enumerate}
\item~[5 points] We have derived the PAC guarantee for consistent learners (namely, the learners can produce a hypothesis that can 100\% accurately classify the training data). The PAC guarantee is described as follows. Let $H$ be the hypothesis space used by our algorithm. Let $C$ be the concept class we want to apply our learning algorithm to search for a target function in $C$. We have shown that,  with probability at least $1-\delta$, a hypothesis $h\in H$ that is consistent with a training set of $m$ examples will have the generalization error $\mathrm{err}_D(h) < \epsilon$ if
\[
m > \frac{1}{\epsilon}\big(\log(|H|) + \log\frac{1}{\delta}\big).
\]

\begin{enumerate}
	\item~[2 points] Suppose we have two learning algorithms $L_1$ and $L_2$, which use hypothesis spaces $H_1$ and $H_2$ respectively. We know that $H_1$ is larger than $H_2$, \ie $|H_1| > |H_2|$.
	For each target function in $C$, we assume both algorithms can find a hypothesis consistent with the training data.
	\begin{enumerate}
		\item~[1 point] According to Occam's Razor principle, which learning algorithm's  result hypothesis do you prefer? Why?
		\\answer\\ We want to use H2 space since its cardinality is lower, and allowing $ln(|H|)$ to lower to make the PAC equality equalize faster
		\item~[1 point]  How is this principle reflected in our PAC guarantee? Please use the above inequality to explain why we will prefer the corresponding result hypothesis.
		\\answer\\ since we want to use the same error for both h1 and he, 1/e doesnt change. $ln(H)$ does increase, we make the learning space harder, with high complexity, finally $ln(1/delta)$ the confidence in the classifier produced will require high delta/complexity.
	\end{enumerate}
	\item~[3 points] Let us investigate algorithm $L_1$. Suppose we have $n$ input features, and the size of the hypothesis space used by $L_1$ is $3^n$. Given $n=10$ features, if we want to guarantee a 95\% chance of learning a hypothesis of at least 90\% generalization accuracy, how many training examples at least do we need for $L_1$?
	\\answer\\$\delta = .05$ \\$n ln H = 10ln(3)$ so plugging into the equation we get \\$(ln(1-.05) + 10ln3) / .1$ which comes out to 139.81, which we round up to 140

\end{enumerate}

\item~[5 points] In our lecture about AdaBoost algorithm, we introduced the definition of weighted error in each round $t$,
\[
\epsilon_t = \frac{1}{2} - \frac{1}{2}\big(\sum_{i=1}^m D_t(i) y_i h_t(x_i)\big)
\]
where $D_t(i)$ is the weight of $i$-th training example, and $h_t(x_i)$ is the prediction of the weak classifier learned round $t$. Note that both $y_i$ and $h_t(x_i)$ belong to $\{1, -1\}$. Prove that equivalently,
\[
\epsilon_t = \sum_{y_i \neq h_t(x_i)} D_t(i).
\]
\\answer\\   $\sum_{i=1}^m D_t(i) y_i h_t(x_i)$ \\consists of the summation of the set that was hit, and not hit, combined with thier weights, so can be segmented into both a summation of both sets.  while $\epsilon_t = \sum_{y_i \neq h_t(x_i)} D_t(i).$ consists of the set of misses and thier weights, but notably is *-1, which is the negative of the set of misses. Making them equivalate is as such\\
$\frac{1}{2} - \frac{1}{2}\big(- \sum_{y_i \neq h_t(x_i)} D_t(i) + \sum_{y_i = h_t(x_i)} D_t(i)) = \epsilon_t = \sum_{y_i \neq h_t(x_i)} D_t(i).$\\
$1 - \big(- \sum_{y_i \neq h_t(x_i)} D_t(i) + \sum_{y_i = h_t(x_i)} D_t(i)) = 2 \sum_{y_i \neq h_t(x_i)} D_t(i).$\\
$1 - \sum_{y_i = h_t(x_i)} D_t(i)) =  \sum_{y_i \neq h_t(x_i)} D_t(i).$ \\
$1 = \sum_{y_i = h_t(x_i)} D_t(i)) +  \sum_{y_i \neq h_t(x_i)} D_t(i).$ \\which is true




\item~[20 points] Can you figure out an equivalent linear classifier for the following Boolean functions? Please point out what the weight vector, the bias parameter and the hyperplane are. Note that the hyperplane is determined by an equation. If you cannot find out a  linear classifier, please explain why, and work out some feature mapping such that, after mapping all the inputs of these functions into a higher dimensional space, there is a hyperplane that well separates the inputs; please write down the separating hyperplane in the new feature space.
	\begin{enumerate}
		\item~[2 point] $f(x_1, x_2, x_3) = x_1 \land \neg x_2 \land \neg x_3$ \\answer\\
		bias should be 1, weight vector should be $\begin{bmatrix}1\\-1\\-1\\\end{bmatrix}$ and a hyperplane eqn of 1+x1-x2-x3=0

		\item~[2 point] $f(x_1, x_2, x_3) = \neg x_1 \lor \neg x_2 \lor \neg x_3$
		using inequality to move the or statments to and, $\neg( x_1 \land  x_2) \lor \neg x_3$
		$\neg(( x_1 \land  x_2) \land  x_3)$ which inverts the <= to >, making the threshold >3
		Bias should be 3, w = $\begin{bmatrix}1\\1\\1\\\end{bmatrix}$, hyperplane of 3+x1+x2+x=0

		\item~[8 points] $f(x_1, x_2, x_3, x_4) = (x_1 \lor x_2) \land (x_3 \lor x_4)$
		if we map out the descision tree we find that just equating the func to >=2 doesnt work, since [1,1,0,0] and [0,0,1,1] also doesnt work, so we have to adjust, creating a function of (x1+x2)*(x3+x4) + (x1+x2)*(x3+x4) >=2 creates the conditions to make the equation true, making the bias 2, weight vector  of $\begin{bmatrix}1\\1\\1\\1\\\end{bmatrix}$ and a hyperplane of 2 +(x1+x2)*(x3+x4) + (x1+x2)*(x3+x4) = 0
		\item ~[8 points] $f(x_1, x_2) = (x_1 \land x_2) \lor (\neg x_1 \land \neg x_2)$ this is a parity XOR function, and as such isnt linearly seperable at this level. If we apply a dimension transformation to them, effectively making the bottom left and top right quadrents live above the z axis and the other quadrents live below we can effectively classify it with a hyperplane along the z axis., so have the classifier live along a x1*x2 > 0 axis
	\end{enumerate}


	\item~[\textbf{Bonus}]~[8 points]  Given two vectors $\x = [x_1,  x_2]$ and $\y=[y_1,  y_2]$, find a feature mapping $\phi(\cdot)$ for each of the following functions, such that the function is equal to the inner product between the mapped feature vectors, $\phi(\x)$ and $\phi(\y)$. For example, $(\x^\top \y)^0 = \phi(\x)^\top \phi(\y)$ where $\phi(\x) = [1]$ and $\phi(\y) = [1]$; $(\x^\top \y)^1 = \phi(\x)^\top \phi(\y)$ where $\phi(\x) = \x$ and $\phi(\y) = \y$.
	\begin{enumerate}
		\item~[2 points] $(\x^\top \y)^2$
		\\answer\\ the feature $\phi (x)$  should go ahead and consist of x vector of  $\begin{bmatrix}x1y1\\x1y2\\\end{bmatrix}$ phi y of $\begin{bmatrix}y2x1\\y2x2\end{bmatrix}$ since it should remultiply to a the expected $\begin{bmatrix}x1^2y1^2+x1x2y1y2, etc\\etc,etc\\\end{bmatrix}$
		\item~[2 points] $(\x^\top \y)^3$
		\\answer\\should consist of the above answer's output split down the middle, so phi(x) = $[x1^2y1^2+x1x2y1y2,etc]$
		\item~[4 points] $(\x^\top \y)^k$ where $k$ is  any positive integer.
		\\
	\end{enumerate}

\item~[10 points] Suppose we have the training data shown in Table \ref{tb:1}, from which we want to learn a linear regression model, parameterized by a weight vector $\w$ and a bias parameter $b$.
\begin{table}
	\centering
	\begin{tabular}{ccc|c}
		$x_1 $ & $x_2$ & $x_3$ &  $y$\\
		\hline\hline
		1 & -1 & 2 & 1 \\ \hline
		1 & 1 & 3 & 4 \\ \hline
		-1 & 1 & 0 & -1 \\ \hline
		1 & 2 & -4 & -2 \\ \hline
		3 & -1 & -1 & 0\\ \hline
	\end{tabular}
	\caption{Linear regression training data.}\label{tb:1}
\end{table}

\begin{enumerate}
	\item~[1 point] Write down the LMS (least mean square) cost function $J(\w, b)$.
	\\snswer\\
	min 1/2($\sum^m_1 (y_i -(w^Tx_i+b))^2$
	\item~[3 points] Calculate the gradient $\frac{\nabla J}{\nabla \w}$ and $\frac{\nabla J}{\nabla b}$ when $\w = [-1,1,-1]^\top$ and $b = -1$.\\answer\\ (36+64+40) = 140/2 = 70 being the gradient error.
	\item~[3 points] What are the optimal $\w$ and $\b$ that minimize the cost function?
	intially [0.1.1] = w amd b=0 seems like a good answer with a cost gradient of 2, however plugging it into the LMS calculator we did as part c of the programming questions below I got [0.52528548 0.53833605 0.87601958]

	\item~[3 points] Now, we want to use stochastic gradient descent to minimize $J(\w, b)$. We initialize $\w = \0$ and $b = 0$. We set the learning rate $r = 0.1$ and sequentially go through the $5$ training examples. Please list the stochastic gradient in each step and the updated $\w$ and $b$.  weights are as follows, running through my stochastic descent from the programming section below. b doesnt change appreciably.\\
	0.1, -0.09000000000000001, 0.16200000000000003\\
0.4504, 0.22536, 1.0134720000000002\\
0.527896, 0.15561360000000002, 1.0134720000000002\\
0.6493724800000001, 0.3742712640000001, 0.7510828032000001\\
0.4025434681600001, 0.3824988977280001, 0.7584876735552001\\
\end{enumerate}
\end{enumerate}

\section{Practice [60 points + 10 bonus]}
\begin{enumerate}
	\item~[2 Points] Update your machine learning library. Please check in your implementation of decision trees in HW1 to your GitHub repository. Remember last time you created a folder ``Decision Tree". You can commit your code into that folder. Please also supplement README.md with concise descriptions about how to use your code to learn decision trees (how to call the command, set the parameters, etc). Please create two folders ``Ensemble Learning" and ``Linear Regression''  in the same level as the folder ``Decision Tree''.


\item~[36 points] We will implement the boosting and bagging algorithms based on decision trees.  Let us test them on the bank marketing dataset in HW1 (bank.zip in Canvas). We use the same approach to convert the numerical features into binary ones. That is, we choose the media (NOT the average) of the attribute values (in the training set) as the threshold, and examine if the feature is bigger (or less) than the threshold.  For simplicity, we treat ``unknown'' as a particular attribute value, and hence we do not have any missing attributes for both training and test.
\begin{enumerate}
	\item~[8 points] Modify your decision tree learning algorithm to learn decision stumps ---  trees with only two levels. Specifically, compute the information gain to select the best feature to split the data. Then for each subset, create a leaf node. Note that your decision stumps must support weighted training examples. Based on your decision stump learning algorithm, implement AdaBoost algorithm. Vary the number of iterations T from $1$ to $500$, and examine the training and test errors. You should report the results in two figures. The first figure shows how the training and test errors vary along with T. The second figure shows  the training and test errors of all the decision stumps learned in each iteration. What can you observe and conclude? You have had the results for a fully expanded decision tree in HW1. Comparing them with Adaboost, what can you observe and conclude?

	\item~[8 points] Based on your code of the decision tree learning algorithm (with information gain), implement a Bagged trees learning algorithm. Note that each tree should be fully expanded --- no early stopping or post pruning. Vary the number of trees from $1$ to $500$, report how the training and test errors vary along with the tree number in a figure. Overall, are bagged trees better than a single tree? Are bagged trees better than Adaboost?

	\item~[6 points] Through the bias and variance decomposition, we have justified why the bagging approach is more effective than a single classifier/predictor. Let us verify it in real data. Experiment with the following procedure.
	\begin{itemize}
		\item REPEAT for 100 times
		\item ~[STEP 1] Sample $1,000$ examples \textit{uniformly without replacement} from the training datset
		\item ~[STEP 2] Run your bagged trees learning algorithm based on the $1,000$ training examples and learn $500$ trees.
		\item END REPEAT
		\item Now you have $100$ bagged predictors in hand. For comparison, pick the first tree in each run to get $100$ fully expanded trees (i.e. single trees).
		\item 	For each of the test example, compute the predictions of the $100$ single trees. Take the average, subtract the ground-truth label, and take square to compute the bias term (see the lecture slides). Use all the predictions to compute the sample variance  as the approximation to the variance term (if you forget what the sample variance is, check it out
		\href{http://www.randomservices.org/random/sample/Variance.html}{here}). You now obtain the bias and variance terms of a single tree learner for one test example. You will need to compute them for all the test examples and then take average as your final estimate of the bias and variance terms for the single decision tree learner. You can add the two terms to obtain the estimate of the general squared error (that is, expected error w.r.t test examples). Now use your $100$ bagged predictors to do the same thing and estimate the general bias and variance terms, as well as the general squared error.  Comparing the results of the single tree learner and the bagged trees, what can you conclude?  What causes the difference?
	\end{itemize}

	\item~[8 points] Implement the random forest algorithm as we discussed in our lecture. Vary the number of random trees from $1$ to $500$. Note that you need to modify your tree learning algorithm to randomly select a subset of features before each split. Then use the information gain to select the best feature to split.  Vary the size of the feature subset from $\{2, 4, 6\}$.  Report in a figure how the training and test errors vary along with the number of random trees for each feature subset size setting. How does the performance compare with bagged trees?

	\item~[6 points] Following (c), estimate the bias and variance terms, and the squared error for a single random tree and the whole forest.  Comparing with the bagged trees, what do you observe? What can you conclude?
\end{enumerate}

\item~[\textbf{Bonus}][10 points] In practice, to confirm the performance of your algorithm, you need to find multiple datasets for test (rather than one). You need to extract and process data by yourself. Now please use the credit default dataset in UCI repository \href{https://archive.ics.uci.edu/ml/datasets/default+of+credit+card+clients}{https://archive.ics.uci.edu/ml/datasets/default+of+credit+card+clients}. Randomly choose $24000$ examples for training and the remaining $6000$ for test. Feel free to deal with continuous features. Run bagged trees, random forest, and Adaboost with decision stumps algorithms for $500$ iterations. Report in a figure how the training and test errors vary along with the number of iterations, as compared with a fully expanded single decision tree. Are the results consistent with the results you obtained from the bank dataset?

	\item~[22 points] We will implement the LMS method for a linear regression task. The dataset is from UCI repository (\url{https://archive.ics.uci.edu/ml/datasets/Concrete+Slump+Test}). The task is to predict the real-valued SLUMP of the concrete, with $7$ features. The features and output are listed in the file ``concrete/data-desc.txt''. The training data are stored in the file ``concrete/train.csv'', consisting of $53$ examples. The test data are stored in ``concrete/test.csv'', and comprise of $50$ examples. In both the training and testing datasets, feature values and outputs are separated by commas.

	\begin{enumerate}
		\item~[8 points] Implement the batch gradient descent algorithm, and tune the learning rate $r$ to ensure the algorithm converges.  To examine convergence, you can watch the norm of the weight vector difference,  $\|w_{t} - w_{t-1}\|$,  at each step $t$.  if $\|w_{t} - w_{t-1}\|$ is  less than a tolerance level, say, $10^{-6}$, you can conclude that it converges. You can initialize your weight vector to be $\0$.  Please find an appropriate $r$ such that the algorithm converges. To tune $r$, you can start with a relatively big value, say, $r=1$, and then gradually decrease $r$, say $r=0.5, 0.25, 0.125, \ldots$, until you see the convergence.
		Report the learned weight vector, and the learning rate $r$. Meanwhile, please record the cost function  value of the training data at each step, and then draw a figure shows how the cost function changes along with steps. Use your final weight vector to calculate  the cost function value of the test data.
		%To do so, you can start $r$ to be relatively big, say, $r=1$, and then gradually decrease $r$. For a specific setting of $r$, you can calculate the cost function after each update and draw a curve showing how the cost function changes along with the number of updates. If you find the cost function on your curve tends to converge, you can conclude your algorithm convergences.
		\\answer\\
		0.015108218228372966, -0.1674858302228262, -0.1390391869786703, 0.3251564247811727, -0.029104642305470028, 0.07407051235872758, -0.019475339941184895  \\ would be the learned weight vector, the learning rate ending up being 1.9073486328125e-06 \\\begin{center}
\includegraphics[scale=0.6]{batch.png}
\end{center} \\cost value function should be .0.015108218228372966x1 -0.1674858302228262x2 -0.1390391869786703x3+ 0.3251564247811727x4 -0.029104642305470028x5+ 0.07407051235872758x6 -0.019475339941184895x7   = y
		\item~[8 points] Implement the stochastic gradient descent (SGD) algorithm. You can initialize your weight vector to be $\0$. Each step, you randomly sample a training example, and then calculate the stochastic gradient to update the weight vector.  Tune the learning rate $r$ to ensure your SGD converges. To check convergence, you can calculate the cost function of the training data after each stochastic gradient update, and draw a figure showing how the cost function values vary along with the number of updates. At the beginning, your curve will oscillate a lot. However, with an appropriate $r$, as more and more updates are finished, you will see the cost function tends to converge. Please report the learned weight vector, and the learning rate you chose, and the cost function value of the test data with your learned weight vector.   \\ answer \\ -0.16881989400046044, -0.19640332273971492, -0.2317126312443963, 0.422231874248079, -0.06995852854676263, 0.11665833711963602, 0.005257913272677131\\ was the weight vector, and 9.530774036647927e-07 being my final gamma, it should be noted that the gamma was decreased by 1.1 times every time the oscillations became bigger, allowing it to converge (see diagram below.) the cost fuction is roughly -.1x1-.20x2-23.x3+.42x4-.06x5-.11x6+.01x7 = y\\\begin{center}
\includegraphics[scale=0.6]{sto.png}
\end{center} \\
		\item~[6 points] We have discussed how to  calculate the optimal weight vector with an analytical form. Please calculate the optimal weight vector in this way. Comparing with the  weight vectors learned by batch gradient descent and stochastic gradient descent, what can you conclude? Why?
		\\answer\\ 0.92154947 0.80829428 0.87397433 1.3142877  0.13392374 1.59904727
 1.02029192  was the optimal vector,
stochastic was off by 5.58 when summed and batch was  5.78 off when summed. it seems due to the randomness of the stochastic it5 goes ahead and provides a good enough example quickly,  but its far more variablized then the batch descent, however this could be due to statistical deficiency.
	\end{enumerate}

\end{enumerate}

\end{document}
%%% Local Variables:
%%% mode: latex
%%% TeX-master: t
%%% End:
